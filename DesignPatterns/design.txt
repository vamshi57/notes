Types of Design Patterns
========================
   1)Creational:-
    ==========
    Class-creational patterns and object-creational patterns
    ---------------------------------------------------------
   Creational design patterns are the Factory Method, 
   Abstract Factory, Builder, Singleton, 
   Object Pool, and Prototype.

   2)Structural:-
   ==============
   Structural design patterns are Adapter, Bridge, 
  Composite, Decorator, Facade, Flyweight,
  Private Class Data, and Proxy.

  3)Behavioral:
   ============
  Behavioral patterns are Chain of responsibility, Command, Interpreter, 
  Iterator, Mediator, Memento, Null Object, Observer,
  State, Strategy, Template method, Visitor
===============================================================================================

factory methode design pattter
================================
 import java.io.*;      
  abstract class Plan{  
         protected double rate;  
         abstract void getRate();  
   
         public void calculateBill(int units){  
              System.out.println(units*rate);  
          }  
  }//end of Plan class.  
----------------------------------------------------------------------
Step 2: Create the concrete classes that extends Plan abstract class.
---------------------------------------------------------------------

class  DomesticPlan extends Plan{  
        //@override  
         public void getRate(){  
             rate=3.50;              
        }  
   }//end of DomesticPlan class.  
class  CommercialPlan extends Plan{  
   //@override   
    public void getRate(){   
        rate=7.50;  
   }   
/end of CommercialPlan class.  
class  InstitutionalPlan extends Plan{  
   //@override  
    public void getRate(){   
        rate=5.50;  
   }   
/end of InstitutionalPlan class. 
------------------------------------------------------------------------------------------------- 
Step 3: Create a GetPlanFactory to generate object of concrete classes based on given information..
----------------------------------------------------------------------------------------------------
class GetPlanFactory{  
      
   //use getPlan method to get object of type Plan   
       public Plan getPlan(String planType){  
            if(planType == null){  
             return null;  
            }  
          if(planType.equalsIgnoreCase("DOMESTICPLAN")) {  
                 return new DomesticPlan();  
               }   
           else if(planType.equalsIgnoreCase("COMMERCIALPLAN")){  
                return new CommercialPlan();  
            }   
          else if(planType.equalsIgnoreCase("INSTITUTIONALPLAN")) {  
                return new InstitutionalPlan();  
          }  
      return null;  
   }  
}//end of GetPlanFactory class.  
---------------------------------------------------------------------------------------------------------------------- 
Step 4: Generate Bill by using the GetPlanFactory to get the object of concrete classes by passing an information such as type of plan DOMESTICPLAN or COMMERCIALPLAN or INSTITUTIONALPLAN.
----------------------------------------------------------------------------------------------------------------------------
import java.io.*;    
class GenerateBill{  
    public static void main(String args[])throws IOException{  
      GetPlanFactory planFactory = new GetPlanFactory();  
        
      System.out.print("Enter the name of plan for which the bill will be generated: ");  
      BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  
  
      String planName=br.readLine();  
      System.out.print("Enter the number of units for bill will be calculated: ");  
      int units=Integer.parseInt(br.readLine());  
  
      Plan p = planFactory.getPlan(planName);  
      //call getRate() method and calculateBill()method of DomesticPaln.  
  
       System.out.print("Bill amount for "+planName+" of  "+units+" units is: ");  
           p.getRate();  
           p.calculateBill(units);  
            }  
    }
================================================================================================================
Abstract Factory Pattern